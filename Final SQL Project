WITH crosswalk_avg_safety AS (SELECT c.street, avg(c.safetyrating) AS rating
FROM CityBikeLanes c
group by c.street)
SELECT street, rating, 'Safe Lane' AS label
FROM crosswalk_avg_safety
WHERE rating >=4;

--list all the bike lanes, both safety ratings for each lane given by the two technicians, average safety rating for each lane,
--recommendation of "Remove", "Leave As-Is", or "Improvements Needed".
SELECT street, safetyrating,
AVG(safetyrating) OVER (PARTITION BY street) as "Average_safety_rating",
CASE
WHEN Avg(safetyrating) OVER (PARTITION BY street) >=4 THEN 'Leave as is'
WHEN Avg(safetyrating) OVER (PARTITION BY street) <2.5 THEN 'Remove'
ELSE 'Improvements Needed'
end as Reccomendation
FROM CityBikeLanes;



#In this SQL, I'm querying a database with multiple tables in it to quantify statistics about customer and order data of a digital media store. 

#Show Customers who are not in the US.
SELECT FirstName, LastName, CustomerId, Country
FROM chinook.customers
WHERE country <> 'USA';

#Show only the Customers from Brazil.
SELECT FirstName, LastName, CustomerId, Country
FROM chinook.customers
WHERE country = 'Brazil';

#Find the Invoices of customers who are from Brazil. The resulting table should show the  , Date of the invoice,
SELECT customers.FirstName, customers.LastName, invoices.InvoiceId, invoices.InvoiceDate, invoices.BillingCountry
FROM chinook.customers
JOIN chinook.invoices
ON customers.CustomerId = invoices.CustomerId
WHERE country = 'Brazil';

#Show the Employees who are Sales Agents.
SELECT EmployeeId, LastName, FirstName, Title
FROM chinook.employees
WHERE Title = 'Sales Support Agent';

#Find a unique/distinct list of billing countries from the Invoice table.
SELECT DISTINCT BillingCountry
FROM chinook.invoices;

#Provide a query that shows the invoices associated with each sales agent. The resulting table should include the Sales Agent's full name.
SELECT invoices.InvoiceId, employees.FirstName, employees.LastName
FROM chinook.invoices
JOIN chinook.customers
ON invoices.CustomerId = customers.CustomerId
JOIN chinook.employees
ON customers.SupportRepId = employees.EmployeeId;

#Show the Invoice Total, Customer name, Country, and Sales Agent name for all invoices and customers.
SELECT ROUND(SUM(invoices.Total),2) AS 'Total Revenue', 
customers.FirstName, customers.LastName, customers.Country, 
employees.LastName AS EmployeeLastName, employees.FirstName AS EmployeeFirstName
FROM chinook.invoices
JOIN chinook.customers
ON invoices.CustomerId = customers.CustomerId
JOIN chinook.employees
ON customers.SupportRepId = employees.EmployeeId
GROUP BY customers.CustomerId;


#How many Invoices were there in 2009?
SELECT COUNT(InvoiceId) AS '2009 Invoice Count'
FROM chinook.invoices
WHERE InvoiceDate LIKE '%2009%';

#What are the total sales for 2009?
SELECT ROUND(SUM(Total),2) AS '2009 Total Revenue'
FROM chinook.invoices
WHERE InvoiceDate LIKE '%2009%';

#Write a query that includes the purchased track name with each invoice line ID.
SELECT tracks.Name AS TrackName, invoice_items.InvoiceId 
FROM chinook.invoice_items
JOIN chinook.tracks
ON invoice_items.TrackId = tracks.TrackId
JOIN chinook.albums
ON tracks.AlbumId = albums.AlbumId;

#Write a query that includes the purchased track name AND artist name with each invoice line ID.
SELECT tracks.Name AS TrackName, artists.Name AS Artist, invoice_items.InvoiceId 
FROM chinook.invoice_items
JOIN chinook.tracks
ON invoice_items.TrackId = tracks.TrackId
JOIN chinook.albums
ON tracks.AlbumId = albums.AlbumId
JOIN chinook.artists
ON albums.ArtistId = artists.ArtistId;

#Provide a query that shows all the Tracks, and include the Album name, Media type, and Genre.
SELECT tracks.Name AS TrackName, albums.Title AS AlbumTitle, media_types.Name AS Media_Type, genres.Name AS Genre
FROM chinook.tracks
JOIN chinook.albums
ON tracks.AlbumId = albums.AlbumId
JOIN chinook.media_types
ON tracks.MediaTypeId = media_types.MediaTypeId
JOIN chinook.genres
ON tracks.GenreId = genres.GenreId;

#Show the total sales made by each sales agent.
SELECT ROUND(SUM(Total),2) AS 'Total Sales Made', 
employees.LastName AS EmployeeLastName, employees.FirstName AS EmployeeFirstName
FROM chinook.invoices
JOIN chinook.customers
on invoices.CustomerId = customers.CustomerId
JOIN chinook.employees
ON customers.SupportRepId = employees.EmployeeId
GROUP BY EmployeeId;

# Which sales agent made the most dollars in sales in 2009?
SELECT ROUND(SUM(Total),2) AS 'Total Sales Made 2009', employees.LastName AS EmployeeLastName, employees.FirstName AS EmployeeFirstName
FROM chinook.invoices
JOIN chinook.customers
on invoices.CustomerId = customers.CustomerId
JOIN chinook.employees
ON customers.SupportRepId = employees.EmployeeId
WHERE  InvoiceDate LIKE '%2009%'
GROUP BY EmployeeId
ORDER BY `Total Sales Made 2009` DESC
LIMIT 1;
